/****************************************************************************
 * apps/examples/hello/hello_main.c
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.  The
 * ASF licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/

#include <nuttx/config.h>
#include <nuttx/clock.h>
#include <nuttx/time.h>
#include <unistd.h>
#include <stdio.h>
#include <pthread.h>
#include <stdbool.h>
#include "./c_util/tracer.h"
#include <signal.h>

#include "./cmsis/stm32f411xe.h"


#define MID_PRIORITY 100
#define STACKSIZE 1024

volatile bool stop = false;

void handle_sigint(int sig) {
    stop = true;
}

trace_time_t trace;

static void *thread_func(void *arg)
{
    return NULL;
}


int main(int argc, FAR char *argv[]) {

    RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
    trace_init(TIM5, 1);

    pthread_t thread1, thread2, thread3;
    pthread_attr_t attr;
    struct sched_param sparam;
    int priority;
    
    

    pthread_attr_init(&attr);
    pthread_attr_setstacksize(&attr, STACKSIZE);

    // Create thread with priority MID - 1
    priority = MID_PRIORITY - 1;
    sparam.sched_priority = priority;
    pthread_attr_setschedparam(&attr, &sparam);
    START_TRACE(trace, TIM5);
    pthread_create(&thread1, &attr, thread_func, &priority);
    STOP_TRACE(trace, TIM5);
    printf("INFO create -1: %u\n", trace.t2 - trace.t1);
    
    START_TRACE(trace, TIM5);
    pthread_cancel(thread1);
    STOP_TRACE(trace, TIM5);
    printf("INFO delete -1: %u\n", trace.t2 - trace.t1);

    // Create thread with priority MID
    priority = MID_PRIORITY;
    sparam.sched_priority = priority;
    pthread_attr_setschedparam(&attr, &sparam);
    START_TRACE(trace, TIM5);
    pthread_create(&thread2, &attr, thread_func, &priority);
    STOP_TRACE(trace, TIM5);
    printf("INFO +0: %u\n", trace.t2 - trace.t1);

    START_TRACE(trace, TIM5);
    pthread_cancel(thread1);
    STOP_TRACE(trace, TIM5);
    printf("INFO delete -1: %u\n", trace.t2 - trace.t1);

    // Create thread with priority MID + 1
    priority = MID_PRIORITY + 1;
    sparam.sched_priority = priority;
    pthread_attr_setschedparam(&attr, &sparam);
    START_TRACE(trace, TIM5);
    pthread_create(&thread3, &attr, thread_func, &priority);
    STOP_TRACE(trace, TIM5);
    printf("INFO +1: %u\n", trace.t2 - trace.t1);

    START_TRACE(trace, TIM5);
    pthread_cancel(thread1);
    STOP_TRACE(trace, TIM5);
    printf("INFO delete +1: %u\n", trace.t2 - trace.t1);

    // Wait for all threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    pthread_join(thread3, NULL);

    return 0; 
}

